import click
import sys
import openai
from mindmate.utils.utils import utility
from mindmate.utils.helper import help
from mindmate.utils.conf import constants


def stream_response(completion):
    """Stream the messages generated by the OpenAI API to the user."""
    for choice in completion.choices:
        if 'message' in choice and 'content' in choice.message:
            return choice.message['content']


@click.command()
@click.option('-P', '--platform', required=True, default='openai', show_default=False, type=str, help='use openai platform as an underlying technology')
@click.option('-m', '--model', required=True, default='text-davinci-003', show_default=True, type=str, help='select targeted model to utilize')
@click.option('-p', '--prompt', required=True, show_default=False, type=str, help='Your prompt to AI')
def chat(platform, model, prompt):
    """offers text-based response to your prompt"""
    #TODO: complete
    click.echo(help.generic_message())
    KEYS = utility.set_yaml_state(constants.FILE_PATH+'/'+constants.FILE_NAME)['keys']
    OPENAI_TOKEN = KEYS['openai_token']
    OPENAI_ID = KEYS['openai_id']

    openai.api_key = OPENAI_TOKEN
    try:
        #TODO: unstable code, due to not having openAI paid account
        completion = openai.ChatCompletion.create(
            model=model,
            temperature=0,
            stream=True,
            user=OPENAI_ID,
            messages = [
                {
                    'role':'user',
                    'content': prompt
                }
            ]
        )
    except openai.error.AuthenticationError as e:
        click.echo(f"{constants.SYS_ROLE}: invalid credentials, use 'configure' command to provide valid token, see https://platform.openai.com/account/api-keys")
        sys.exit(1)
    except openai.error.RateLimitError as r:
        click.echo(f"{constants.SYS_ROLE}: You exceeded your current OPENAI quota, check your plan and billing details")
        sys.exit(1)

    #TODO: not cooked code
    for choice in completion.choices:
        if 'message' in choice and 'content' in choice.message:
            # return choice.message['content']
            click.echo(choice.message['content'])
