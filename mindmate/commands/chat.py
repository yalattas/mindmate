import click
import sys
import openai
from mindmate.utils.utils import utility
from mindmate.utils.helper import help
from mindmate.utils.conf import constants


def stream_response(completion):
    """Stream the messages generated by the OpenAI API to the user."""
    for choice in completion.choices:
        if 'message' in choice and 'content' in choice.message:
            return choice.message['content']

def model_option_callback(ctx, param, value):
    try:
        platform = ctx.params['platform']
    except KeyError:
        click.echo(f"{constants.SYS_ROLE}: You can't specify a platform/model alone, you need to specify them both or don't specify both.")
        click.echo(f"{constants.HINT_ROLE}: try to re-order to the options and starts with --platform/-P then --model/-m and then --prompt/-p")
        sys.exit(1)
    if platform == 'openai':
        return value if value in constants.MODEL_OPTIONS['openai'] else None
    elif platform == 'aws':
        return value if value in constants.MODEL_OPTIONS['aws'] else None
    else:
        return None

@click.command()
@click.option('-P', '--platform', required=True, default='openai', show_default=False, type=click.Choice(constants.PLATFORM_OPTIONS), help='use platform as an underlying technology')
@click.option('-m', '--model', required=True, default='text-davinci-003', show_default=True, type=str, callback=model_option_callback, help='select targeted model to utilize')
@click.option('-p', '--prompt', required=True, show_default=False, type=str, help='Your prompt to AI')
def chat(platform, model, prompt):
    """offers text-based response to your prompt"""
    click.echo(help.generic_message())
    # click.echo(click.get_current_context().params)
    KEYS = utility.set_yaml_state(constants.FILE_PATH+'/'+constants.FILE_NAME)['keys']
    if platform == 'openai':
        if model not in constants.MODEL_OPTIONS['openai']:
            click.echo(f"{constants.SYS_ROLE}: invalid model, pass one of the correct options python main.py chat --model {constants.MODEL_OPTIONS['openai']}")
            sys.exit(1)
        OPENAI_TOKEN = KEYS['openai_token']
        OPENAI_ID = KEYS['openai_id']

        openai.api_key = OPENAI_TOKEN
        try:
            #TODO: unstable code, due to not having openAI paid account
            completion = openai.ChatCompletion.create(
                model=model,
                temperature=0,
                stream=True,
                user=OPENAI_ID,
                messages = [
                    {
                        'role':'user',
                        'content': prompt
                    }
                ]
            )
        except openai.error.AuthenticationError as e:
            click.echo(f"{constants.SYS_ROLE}: invalid credentials, use 'configure' command to provide valid token, see https://platform.openai.com/account/api-keys")
            sys.exit(1)
        except openai.error.RateLimitError as r:
            click.echo(f"{constants.SYS_ROLE}: You exceeded your current OPENAI quota, check your plan and billing details")
            sys.exit(1)

        #TODO: not cooked code
        for choice in completion.choices:
            if 'message' in choice and 'content' in choice.message:
                # return choice.message['content']
                click.echo(choice.message['content'])
    else:
        click.echo(f'{constants.SYS_ROLE}: platform ({platform}) is not supported yet')
